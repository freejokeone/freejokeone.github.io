<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[SASS 之美(1)]]></title>
      <url>/2017/05/18/Sass%E4%B9%8B%E7%BE%8E/</url>
      <content type="html"><![CDATA[<h4 id="关于Sass"><a href="#关于Sass" class="headerlink" title="关于Sass"></a>关于Sass</h4><p>  sass在开发文档中这样描述：是一个css的扩展，它使得css用起来更加优雅和强大;<br>  Sass 对自己的定位首先是一个预处理器。<br>  我之所以喜欢 Sass 源于它最大程度保留了CSS的原生特性。Sass 的设计基于非常坚实的设计原则：大部分的设计顺其自然的来源于核心设计师们的信条，比如添加额外的功能会增加语言的复杂度，但以实用性衡量极具价值的话便得以保留；同时，使用 Sass 来美化一个块级元素，那么美化前后的效果应该是可预见和可推理的。同时，Sass 比其他预处理器更加关注细节。据我所知，核心设计者们非常关心 Sass 与 CSS 在细节上的一致性，并确保所有的常用方式具有高度一致的表现。换言之，Sass 的目标是解决开发者遇到的切实问题，提供高效的函数化解 CSS 的短板。</p>
<h4 id="本篇要介绍的内容"><a href="#本篇要介绍的内容" class="headerlink" title="本篇要介绍的内容"></a>本篇要介绍的内容</h4><ul>
<li>语法格式与书写规范</li>
<li>命名规范</li>
<li>注释</li>
<li>结构设计</li>
<li>响应式设计</li>
<li>变量</li>
<li>拓展</li>
<li>混合</li>
<li>条件语句</li>
<li>循环</li>
<li>扩展工具</li>
<li>小结</li>
</ul>
<h4 id="一、语法格式与书写规范"><a href="#一、语法格式与书写规范" class="headerlink" title="一、语法格式与书写规范"></a>一、语法格式与书写规范</h4><ul>
<li><p>格式规范     </p>
<ul>
<li>统一使用两个空格而不是使用tab</li>
<li>每行保持适当的宽度，便于阅读和修改</li>
<li>正确书多行css规则</li>
<li>有意义的使用空格<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Yep</span></div><div class="line">    <span class="selector-class">.test</span>&#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//Nope</span></div><div class="line">    <span class="selector-class">.test</span>&#123;</div><div class="line">        <span class="attribute">display</span>: inline-block;<span class="attribute">box-sizing</span>: border-box;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>编码问题:为了避免潜在的字符编码问题，在入口文件中通过 @charset 指令使用 UTF-8 编码格式。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">charset</span> <span class="string">"UTF-8"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>数字：在 Sass 中，数字类型包括了长度、持续时间、频率、角度等等无单位数字类型。Sass 允许在运行中计算这些度量值。</p>
<ul>
<li><p>零值：当数字小于 1 时，应该在小数点前写出 0. 永远不要显示小数尾部的0</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Yep </span></div><div class="line"><span class="selector-class">.foo</span> &#123; <span class="attribute">padding</span>: <span class="number">2em</span>; <span class="attribute">opacity</span>: <span class="number">0.5</span>; &#125;</div><div class="line"><span class="comment">// Nope </span></div><div class="line"><span class="selector-class">.foo</span> &#123; <span class="attribute">padding</span>: <span class="number">2.0em</span>; <span class="attribute">opacity</span>: .<span class="number">5</span>; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>单位：当定义长度时， 0 后面不需要加单位。将一个单位添加给数字的时候，实际上是让该数值乘以1个单位 。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Yep </span></div><div class="line"><span class="variable">$length</span>: <span class="number">0</span>;</div><div class="line"><span class="comment">// Nope </span></div><div class="line"><span class="variable">$length</span>: <span class="number">0em</span>;</div><div class="line"> <span class="comment">//-------------------------</span></div><div class="line"><span class="variable">$value</span>: <span class="number">42</span>;</div><div class="line"><span class="comment">// Yep </span></div><div class="line"><span class="variable">$length</span>: <span class="variable">$value</span> * <span class="number">1px</span>;</div><div class="line"><span class="comment">// Nope </span></div><div class="line"><span class="variable">$length</span>: <span class="variable">$value</span> + px;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>计算:最高级运算应该始终被包裹在括号中 最高级运算应该始终被包裹在括号中。这么做不仅是为了提高可读性，也是为了防止一些 Sass 强制要求对括号内内容计算的极端情况。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Yep</span></div><div class="line"><span class="selector-class">.test</span>&#123;</div><div class="line"><span class="attribute">width</span>: (<span class="number">100%</span>/<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//Nope</span></div><div class="line"><span class="selector-class">.test</span>&#123;</div><div class="line"><span class="attribute">width</span>: <span class="number">100%</span>/<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>颜色：为了尽可能简单地使用颜色，建议颜色格式要按照以下顺序排列：</p>
<ul>
<li>HSL 值;</li>
<li>RGB 值;</li>
<li>十六进制（使用小写并尽可能简写）</li>
<li>除非是为了快速开发出原型，否则不建议使用 CSS 颜色关键字。这是因为颜色关键字都是英文单词，对于非英语母语者会造成理解困难。此外，颜色关键字的语义化并不准确，比如 grey 比 darkgrey 的颜色更深一些； grey 和 gray 之间的差别也会造成一致性的问题。</li>
</ul>
</li>
<li><p>颜色和变量 </p>
<ul>
<li><p>当一个颜色被多次调用时，最好用一个有意义的变量名来保存它</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$pink</span>:hsl(<span class="number">320</span>, <span class="number">50%</span>, <span class="number">60%</span>);</div></pre></td></tr></table></figure>
<p> 现在，就可以在任何需要的地方随意使用这个变量了。不过，如果你是在一个主题中使用，我不建议固定的使<br> 用这个变量。相反，可以使用另一个标识方式的变量来保存它。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$main-theme-color</span>: <span class="variable">$pink</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>列表：列表就是 Sass 的数组。列表是一个一维的数据结构</p>
<ul>
<li>列表需要遵守以下规范：</li>
<li>除非列表太长不能写在 80 字符宽度的单行中，否则应该始终单行显示；</li>
<li>除非适用于 CSS，否则应该始终使用逗号作为分隔符；</li>
<li>要么使用内联形式，要么使用多行形式；</li>
<li>始终使用括号包裹；</li>
<li>始终不要添加尾部的逗号。<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$font-stack</span>: (<span class="string">'Helvetica'</span>, <span class="string">'Arial'</span>, sans-serif);</div><div class="line"></div><div class="line"><span class="variable">$font-stack</span>: (</div><div class="line">    <span class="string">'Helvetica'</span>, </div><div class="line">    <span class="string">'Arial'</span>,</div><div class="line">     sans-serif</div><div class="line"> );</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>选择器的嵌套：Sass 中一个正在被众多开发者滥用的功能，就是选择器嵌套 选择器嵌套。选择器嵌套为样式表作者提供了一个通过局部选择器的相互嵌套实现全局选择的方法。</p>
<ul>
<li><p>一般性规则</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.text</span>&#123;</div><div class="line">  <span class="selector-class">.bar</span>&#123;</div><div class="line">    &amp;:hover&#123;</div><div class="line">      <span class="attribute">color</span>:red</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//生成css</div><div class="line"> .text .bar:hover&#123;</div><div class="line">    color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在 Sass 3.3后</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  <span class="selector-class">.text</span>&#123;</div><div class="line">      &amp;-bar&#123;</div><div class="line">      <span class="attribute">color</span>: red;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//生成css</span></div><div class="line">  <span class="selector-class">.text-bar</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>选择器嵌套最大的问题是将使最终的代码难以阅读。开发者需要花费巨大精力计算不同缩进级别下选择器具体的表现效果。CSS 最终的表现效果往往不是浅显易懂的。<br>选择器越具体则声明语句越冗长，而且对最近选择器的引用( &amp; )也越频繁。在某些时候，出现混淆选择器路径和探索下一级选择器的错误率很高，这非常不值得。<br>为了防止此类情况，建议嵌套不要超过三层，我的一件比较激进，建议尽量避免使用嵌套 </p>
</li>
</ul>
</li>
</ul>
<h4 id="二、命名规范"><a href="#二、命名规范" class="headerlink" title="二、命名规范"></a>二、命名规范</h4><ul>
<li>良好的命名对保持整体代码的一致性和可读性非常重要，在 Sass 中可以命名的地方如下：<ul>
<li>变量；</li>
<li>函数；</li>
<li>混合宏。</li>
</ul>
</li>
<li><p>就变量、函数和混合宏的命名而言，我们坚持一些很CSS-y的风格：小写连字符分隔 小写连字符分隔，有意义的命名。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vertical-rhythm-baseline</span>: <span class="number">1.5rem</span>;</div><div class="line">@<span class="keyword">mixin</span> size(<span class="variable">$width</span>, <span class="variable">$height</span>: <span class="variable">$width</span>) &#123;&#125;</div><div class="line">@function opposite-direction(<span class="variable">$direction</span>) &#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>常量:建议使用全大写方式书写常量;</p>
</li>
<li>命名空间:防止与其他人的代码发生冲突，就可能会考虑使用命名空间包裹你所有的变量、函数、混合宏和占位符。<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ad-configuration</span>: ();</div><div class="line">@function ad-rainbow(<span class="variable">$unicorn</span>) &#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="三、注释"><a href="#三、注释" class="headerlink" title="三、注释"></a>三、注释</h4>]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> sass </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
